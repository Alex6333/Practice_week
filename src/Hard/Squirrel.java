package Hard;

public class Squirrel {

    int[] nuts;

    public Squirrel(int[] nuts) {
        this.nuts = nuts;
    }

    int getNuts(int n) {

        return nuts[n];
    }

    int maxNuts() {
        if (nuts.length > 1) {
            int[] arr = nuts.clone();
            arr[1] = max(arr[1], arr[0] + arr[1]);
            if (arr[1] < 0) arr[1] = 0;

            for (int i = 2; i < arr.length; i++) {
                arr[i] = max(arr[i] + arr[i - 1], arr[i] + arr[i - 2]);
                if (arr[i] < 0) arr[i] = 0;
            }
            int a = max(arr[arr.length - 2], arr[arr.length - 1]);
            return max(0, a);
        } else return max(0, nuts[0]);
    }

    private int max(int a, int b) {
        if (a >= b) return a;
        return b;
    }
}


//Помните, что количество орехов не может быть меньше нуля, если белочка будет только терять орехи,
// то принесет она, например, не -5 орехов, а 0.


//Напишите класс Squirrel, в нем должно быть следующее:
//
//поле nuts (массив целых чисел);
//конструктор, в который подают массив nuts ( в каждой ячейке которого хранится значение n, если n — положительное,
// то на пеньке с таким индексом белочка найдет n орешков, если отрицательное, то на этом пеньке белочка потеряет n орешков);
//метод getNuts(int index), возвращает число — сколько найдет или потеряет белочка на пеньке с индексом n;
//метод maxNuts(), также возвращает число — какое максимальное число орешков белочка донесет до дома.
//Пример:
//
//Ввод
//
//Squirrel s = new Squirrel(new int[] {2, 5, -3, -1});
//System.out.println(s.maxNuts());
//Squirrel s2 = new Squirrel(new int[] {1, -2, 3, 1, -1, -4, 2, 3});
//System.out.println(s2.maxNuts());
//Вывод
//6
//9
//Примечание:
//Помните, что количество орехов не может быть меньше нуля, если белочка будет только терять орехи,
// то принесет она, например, не -5 орехов, а 0.
//
//В первом случае лучше всего прыгнуть сразу на первый пенек, с него на второй, перепрыгнуть третий и попасть на последний
//2+5-1=6
//Во втором же — прыгнуть на первый, перепрыгнуть второй, забрать орешки с третьего и прыгнуть на 4-ый,
// потому что на 5-ом мы потеряем аж 4 штуки, после чего собрать 2 последних пенька 1+3+1-1+2+3=9